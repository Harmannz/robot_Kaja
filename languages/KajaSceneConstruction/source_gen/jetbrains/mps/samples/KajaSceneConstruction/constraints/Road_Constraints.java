package jetbrains.mps.samples.KajaSceneConstruction.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import JavaKaja.runtime.Orientation;
import JavaKaja.runtime.MainFrame;
import JavaKaja.runtime.Direction;

public class Road_Constraints extends BaseConstraintsDescriptor {
  public Road_Constraints() {
    super(MetaAdapterFactory.getConcept(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, "jetbrains.mps.samples.KajaSceneConstruction.structure.Road"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf73L, "length"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf73L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "length";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf75L, "orientation"), null).equals(Orientation.horizontal.name())) {
          // We want the row + length to be less than maximum 
          return (SPropertyOperations.getInteger(propertyValue)) + SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x2c8eb033a834fe3fL, 0x2c8eb033a834fe41L, "col")) < MainFrame.WIDTH - 1;
        } else {
          return (SPropertyOperations.getInteger(propertyValue)) + SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x2c8eb033a834fe3fL, 0x2c8eb033a834fe40L, "row")) < MainFrame.HEIGHT - 1;
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf75L, "orientation"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf75L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "orientation";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), null).equals(Direction.east.name()) || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), null).equals(Direction.west.name())) {
          return (SPropertyOperations.getString(propertyValue)).equals(Orientation.horizontal.name());
        } else {
          return (SPropertyOperations.getString(propertyValue)).equals(Orientation.vertical.name());
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "direction";
        if (SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf75L, "orientation"), null).equals(Orientation.horizontal.name())) {
          return SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), null).equals(Direction.east.name()) || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), null).equals(Direction.west.name());
        } else {
          return SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), null).equals(Direction.north.name()) || SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x5faacf6e150bf2bL, 0x5faacf6e150bf9cL, "direction"), null).equals(Direction.south.name());
        }
      }
    });
    return properties;
  }
}
