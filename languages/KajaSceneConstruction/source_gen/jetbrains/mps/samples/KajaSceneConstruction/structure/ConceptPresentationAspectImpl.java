package jetbrains.mps.samples.KajaSceneConstruction.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractBuilderCommand;
  private ConceptPresentation props_AbstractRoad;
  private ConceptPresentation props_BuildWall;
  private ConceptPresentation props_Colour;
  private ConceptPresentation props_DestroyWall;
  private ConceptPresentation props_DirectionQueue;
  private ConceptPresentation props_DropMark;
  private ConceptPresentation props_Green;
  private ConceptPresentation props_PickMark;
  private ConceptPresentation props_Red;
  private ConceptPresentation props_Road;
  private ConceptPresentation props_Steps;
  private ConceptPresentation props_TrafficLight;
  private ConceptPresentation props_Vehicle;
  private ConceptPresentation props_Yellow;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractBuilderCommand:
        if (props_AbstractBuilderCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractBuilderCommand = cpb.create();
        }
        return props_AbstractBuilderCommand;
      case LanguageConceptSwitch.AbstractRoad:
        if (props_AbstractRoad == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractRoad = cpb.create();
        }
        return props_AbstractRoad;
      case LanguageConceptSwitch.BuildWall:
        if (props_BuildWall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("build wall");
          props_BuildWall = cpb.create();
        }
        return props_BuildWall;
      case LanguageConceptSwitch.Colour:
        if (props_Colour == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Colour = cpb.create();
        }
        return props_Colour;
      case LanguageConceptSwitch.DestroyWall:
        if (props_DestroyWall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("destroy wall");
          props_DestroyWall = cpb.create();
        }
        return props_DestroyWall;
      case LanguageConceptSwitch.DirectionQueue:
        if (props_DirectionQueue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("directions to take");
          props_DirectionQueue = cpb.create();
        }
        return props_DirectionQueue;
      case LanguageConceptSwitch.DropMark:
        if (props_DropMark == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("drop mark");
          props_DropMark = cpb.create();
        }
        return props_DropMark;
      case LanguageConceptSwitch.Green:
        if (props_Green == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("green");
          props_Green = cpb.create();
        }
        return props_Green;
      case LanguageConceptSwitch.PickMark:
        if (props_PickMark == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pick mark");
          props_PickMark = cpb.create();
        }
        return props_PickMark;
      case LanguageConceptSwitch.Red:
        if (props_Red == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("red");
          props_Red = cpb.create();
        }
        return props_Red;
      case LanguageConceptSwitch.Road:
        if (props_Road == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("build road");
          props_Road = cpb.create();
        }
        return props_Road;
      case LanguageConceptSwitch.Steps:
        if (props_Steps == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Run for");
          props_Steps = cpb.create();
        }
        return props_Steps;
      case LanguageConceptSwitch.TrafficLight:
        if (props_TrafficLight == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add traffic light");
          props_TrafficLight = cpb.create();
        }
        return props_TrafficLight;
      case LanguageConceptSwitch.Vehicle:
        if (props_Vehicle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("add vehicle: ");
          props_Vehicle = cpb.create();
        }
        return props_Vehicle;
      case LanguageConceptSwitch.Yellow:
        if (props_Yellow == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("yellow");
          props_Yellow = cpb.create();
        }
        return props_Yellow;
    }
    return null;
  }
}
