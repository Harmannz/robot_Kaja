package JavaKaja.runtime;

/*Generated by MPS */


public class Vehicle {
  private Direction heading = Direction.east;
  private Direction[] directionsQueue;
  private Position currentPosition;
  private Position endPosition;
  private int directionIndex;
  private boolean hasTicked = false;

  public Vehicle(Position currentPosition, Position endPosition, Direction heading, Direction... directions) {
    this.heading = heading;
    this.currentPosition = currentPosition;
    this.endPosition = endPosition;
    this.directionsQueue = directions;
    this.directionIndex = 0;
  }

  public Direction getHeading() {
    return heading;
  }

  public void setTicked() {
    hasTicked = true;
  }

  public void unsetTicked() {
    hasTicked = false;
  }

  public Position getCurrentPosition() {
    return currentPosition;
  }

  public void setPosition(int row, int col) {
    this.currentPosition.setRow(row);
    this.currentPosition.setCol(col);
  }
  public void setPosition(Position position) {
    this.currentPosition = position;
  }

  public boolean isTicked() {
    return hasTicked;
  }

  public Direction getDesiredDirection() {
    if (directionsQueue.length == 0) {
      return null;
    }
    return directionsQueue[directionIndex];
  }

  public Direction takeDesiredDirection() {
    // following if statement should never be true 
    if (directionIndex >= directionsQueue.length) {
      throw new RuntimeException("No more directions to take");
    }

    Direction directionToTake = directionsQueue[directionIndex++];
    if (directionIndex >= directionsQueue.length) {
      directionIndex = 0;
    }
    this.heading = directionToTake;
    return directionToTake;
  }

  public boolean reachedDestination() {
    return currentPosition.equals(endPosition);
  }

  public void tick(Cell[][] world) {
    // Get the next cell based on desired direction. If that direction is drivable then take direction otherwise go ahead. 
    // Go ahead may not be possible if next destination is traffic light and its red. 
  }
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (((currentPosition == null) ? 0 : currentPosition.hashCode()));
    return result;
  }

  @Override
  public boolean equals(Object object) {
    if (this == null) {
      return true;
    }
    if (object == null || getClass() != object.getClass()) {
      return false;
    }
    Vehicle other = (Vehicle) object;
    if (currentPosition == null) {
      if (other.currentPosition != null) {
        return false;
      }
    } else if (!(currentPosition.equals(other.currentPosition))) {
      return false;
    }
    return true;
  }
}
